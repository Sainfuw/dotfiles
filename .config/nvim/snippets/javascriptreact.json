{
  "React function native": {
    "prefix": "rfn",
    "body": [
      "import React from 'react';",
      "import {View, StyleSheet, Text} from 'react-native';",
      "",
      "export const ${TM_FILENAME_BASE} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${TM_FILENAME_BASE}</Text>",
      "    </View>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "React function native"
  },

  "React Custom Context": {
    "prefix": "rc",
    "body": [
      "import { createContext } from 'react'",
      "",
      "export const ${TM_FILENAME_BASE} = createContext({});"
    ],
    "description": "React Custom Context"
  },

  "React Native Testing": {
    "prefix": "rnt",
    "body": [
      "import '@testing-library/jest-dom'",
      "",
      "describe('Pruebas en ${TM_FILENAME_BASE}', () => {",
      "  test('${1}', () => {",
      "    ${0}",
      "  });",
      "});"
    ],
    "description": "React Native Testing"
  },

  "New Test Native": {
    "prefix": "ntn",
    "body": ["test('${1}', () => {", "  ${0}", "});"],
    "description": "New Test Native"
  },

  "React Functional Component": {
    "prefix": "rfc",
    "body": [
      "export const ${TM_FILENAME_BASE} = () => {",
      "  return (",
      "    <>",
      "      <h4>${TM_FILENAME_BASE}</h4>",
      "    </>",
      "  );",
      "};"
    ],
    "description": "React Functional Component"
  },

  "Import Component": {
    "prefix": "imr",
    "body": ["import { ${1} } from './${2}';"]
  },

  "StyleSheet React Native": {
    "prefix": "sheet",
    "body": ["const styles = StyleSheet.create({", "  ${0}", "})"],
    "description": "StyleSheet React Native"
  },

  "Console Log": {
    "prefix": "clg",
    "body": ["console.log('${1}');"],
    "description": "Console Log"
  },

  "useState": {
    "prefix": "useS!",
    "body": ["const [${1:Name}, set$1${3}] = useState(${2:Value})"],
    "description": "useState"
  },

  "useEffect": {
    "prefix": "useE!",
    "body": ["useEffect(() => {", "	${1}", "}, [${2}])"],
    "description": "useEffect"
  },

  "useContext": {
    "prefix": "useC!",
    "body": ["const { ${1} } = useContext(${2})"],
    "description": "useContext"
  },

  "useReducer": {
    "prefix": "useR!",
    "body": ["const [state, dispatch] = useReducer(${1}, ${2})"],
    "description": "useReducer"
  },

  "useCallback": {
    "prefix": "useCb!",
    "body": ["const ${1} = useCallback(${2}, [${3}])"],
    "description": "useCallback"
  },

  "useMemo": {
    "prefix": "useM!",
    "body": ["const ${1} = useMemo(${2}, [${3}])"],
    "description": "useMemo"
  },

  "useImperativeHandle": {
    "prefix": "useI!",
    "body": ["useImperativeHandle(${1}, () => ({ ${2} }))"],
    "description": "useImperativeHandle"
  },

  "useDebugValue": {
    "prefix": "useD!",
    "body": ["useDebugValue(${1})"],
    "description": "useDebugValue"
  },

  "useLayoutEffect": {
    "prefix": "useL!",
    "body": ["useLayoutEffect(() => {", "	${1}", "}, [${2}])"],
    "description": "useLayoutEffect"
  },

  "useRef": {
    "prefix": "useR!",
    "body": ["const ${1} = useRef(${2})"],
    "description": "useRef"
  }
}
